module Analysis

	##
	# Class to hold a summary of the vulnerabilities.
	# 
	# @highs   - list of high severity vulnerabilities 
	# @mediums - list of medium severity vulnerabilities 
	# @lows    - list of low severity vulnerabilities
	# @count   - hash containing a count of each type of vulnerability.
	class Summary
		attr_accessor :highs, :mediums, :lows, :count

		def initialize(highs, mediums, lows)
			@highs = highs
			@mediums = mediums
			@lows = lows
			@count = summary_count
		end

		##
		# Input: None
		#
		# Output: A hash containing the counts of high, medium and low 
		# vulnerabilities
		#
		# Action: For each severity of vulnerability call count_vulns 
		def summary_count
			hc = count_vulns(@highs)
			mc = count_vulns(@mediums)
			lc = count_vulns(@lows)

			return {'high' => hc, 'medium' => mc, 'low' => lc}
		end

		##
		# Input: A list of Analyze::Vulnerability objects
		#
		# Output: An integer representing the number of items affected by the 
		# vulnerability.
		#
		# Action: Loop through each vulnerability and add up the length of the 
		# list of affected items.
		def count_vulns(vulns)

			count = 0
	
			unless vulns.empty?
				vulns.each do |vuln|
					# Affected items list contains a header row so, subtract 1
					count += vuln.affected.length - 1 
				end
			end

			return count

		end

	end


	##
	# Class to hold a summary of the vulnerabilities.
	# 
	# @name   - name of the vulnerability 
	# @severity - severity level: high, medium, low 
	# @desc     - description of the vulnerability
	# @solution - recommended solution for the vulnerability
	# @affected - list of items affected by the vulnerability. The first item 
	# in the list is the column names used when writing the list in the report 
	class Vulnerability
		attr_accessor :name, :severity, :desc, :solution, :affected

		def initialize(name)
			@name = name
			@severity = nil
			@desc = nil
			@solution = nil
			@affected = []
		end

		##
		# The vulnerability check is expected to set @severity to 'high', 
		# 'medium', or 'low'. Anything else raises an error.
		def severity=(input)
			if ((input == 'high') || (input == 'medium') || (input == 'low'))
				@severity = input
			else
				raise AnalyzeError.new("Invalid input for Analyze::Vulnerabilty.severity: #{input}")
			end
		end
	
	end

end
