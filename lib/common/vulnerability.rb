module Analysis

##
# Create an Summary object to store the vulnerabilies and counts.
class Summary
	attr_accessor :highs, :mediums, :lows, :count

	def initialize(highs, mediums, lows)
		@highs = highs
		@mediums = mediums
		@lows = lows
		@count = summary_count
	end

	def summary_count
		hc = count_vulns(@highs)
		mc = count_vulns(@mediums)
		lc = count_vulns(@lows)

		return {'high' => hc, 'medium' => mc, 'low' => lc}
	end

	def count_vulns(vulns)

		count = 0

		unless vulns.empty?
			vulns.each do |vuln|
				# vulnerability count is the size of affected minus the header
				# row
				count += vuln.affected.length - 1 
			end
		end

		return count

	end

end

class Vulnerability
	attr_accessor :name, :severity, :desc, :solution, :affected

	def initialize(name)
		@name = name
		@severity = nil
		@desc = nil
		@solution = nil
		@affected = []
	end

	def severity=(input)
		if valid_severity?(input)
			@severity = input
		else
			raise AnalyzeError.new("Invalid input for Analyze::Vulnerabilty.severity: #{input}")
		end
	end

	def valid_severity?(sev)
		return ['critical', 'high', 'medium', 'low'].include?(sev.downcase)
	end

end

end
